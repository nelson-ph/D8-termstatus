<?php
/**
 * @file
 * Contains general functions and hooks used for term status.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultReasonInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\termstatus\Entity\TermWithStatus;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Helper function to get all vocabularies.
 *
 * @return \Drupal\Core\Entity\EntityInterface[]
 */
function termstatus_get_vocabularies() {
  return \Drupal::entityTypeManager()
                ->getStorage('taxonomy_vocabulary')
                ->loadMultiple();
}

/**
 * Implements hook_entity_type_build().
 *
 * @param array $entity_types
 */
function termstatus_entity_type_build(array &$entity_types) {
  if (!empty($entity_types['taxonomy_term'])) {
    $entity_types['taxonomy_term']->setClass('\Drupal\termstatus\Entity\TermWithStatus');
  }
}

/**
 * Implements hook_entity_access().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultNeutral
 */
function termstatus_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity instanceof TermWithStatus) {

    $published = $entity->isPublished();
    $vid = $entity->bundle();

    if ($published) {
      $permission = 'view published terms in ' . $vid;
      $access_result = AccessResult::forbiddenIf(!$account->hasPermission($permission));

      if ($access_result->isForbidden()) {
        throw new AccessDeniedHttpException($access_result instanceof AccessResultReasonInterface ? $access_result->getReason() : NULL);
      }

    }
    else {
      $permission = 'view unpublished terms in ' . $vid;
      $access_result = AccessResult::forbiddenIf(!$account->hasPermission($permission));

      if ($access_result->isForbidden()) {
        throw new AccessDeniedHttpException($access_result instanceof AccessResultReasonInterface ? $access_result->getReason() : NULL);
      }

    }

    return AccessResult::neutral();

  }
}

/**
 * Implements hook_views_data_alter().
 */
function termstatus_views_data_alter(array &$data) {
  $data['taxonomy_term_field_data']['status'] = [
    'title' => t('Taxonomy Term own status'),
    'help' => t('Whether or not the taxonomy term is published.'),
    'field' => [
      'id' => 'field',
    ],
    'filter' => [
      // ID of filter handler plugin to use.
      'id' => 'boolean',
      // Override the generic field title, so that the filter uses a different
      // label in the UI.
      'label' => t('Published term'),
      // Override the default BooleanOperator filter handler's 'type' setting,
      // to display this as a "Yes/No" filter instead of a "True/False" filter.
      'type' => 'yes-no',
      // Override the default Boolean filter handler's 'use_equal' setting, to
      // make the query use 'boolean_field = 1' instead of 'boolean_field <> 0'.
      'use_equal' => TRUE,
    ],
    'sort' => [
      'id' => 'standard',
    ],
    'entity field' => 'status',
  ];
}